name: Build Executables

on:
  push:
    branches:
      - main
    paths:
      - "installer/**"
      - "installer-requirements.txt"
      - ".github/workflows/build-exe.yml"
  pull_request:
    paths:
      - "installer/**"
      - "installer-requirements.txt"
      - ".github/workflows/build-exe.yml"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r installer-requirements.txt
          pip install pyinstaller

      - name: Build Windows Executable
        run: |
          pyinstaller --onefile --name "PyOSInstaller_windows.exe" installer/run-executable.py

      - name: Upload Windows Executable
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: dist/PyOSInstaller_windows.exe

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r installer-requirements.txt
          pip install pyinstaller

      - name: Build Linux Executable
        run: |
          pyinstaller --onefile --name "PyOSInstaller_linux" installer/run.py

      - name: Create Debian Package
        run: |
          sudo apt-get install -y dh-make python3-all
          mkdir -p debian/usr/local/bin
          cp installer/run.py debian/usr/local/bin/
          # Create a control file with the necessary information
          echo "Package: pyosinstaller" > debian/control
          echo "Version: 1.0" >> debian/control
          echo "Maintainer: Your Name <you@example.com>" >> debian/control
          echo "Architecture: all" >> debian/control
          echo "Depends: python3" >> debian/control
          echo "Description: PyOSInstaller package" >> debian/control
          # Create the Debian package without interactive prompts
          cd debian
          dh_make --createorig -s -p pyosinstaller_1.0 --control-file=control
          dpkg-deb --build . ../PyOSInstaller_linux.deb

      - name: Create RPM Package
        run: |
          sudo apt-get install -y rpm python3
          mkdir -p rpm/usr/local/bin
          cp installer/run.py rpm/usr/local/bin/
          echo "Requires: python3" > rpm/PyOSInstaller.spec
          echo "%description" >> rpm/PyOSInstaller.spec
          echo "PyOSInstaller package" >> rpm/PyOSInstaller.spec
          fpm -s dir -t rpm -n PyOSInstaller -v 1.0 rpm/usr/local/bin/run.py --depends python3

      - name: Upload Linux Executables
        uses: actions/upload-artifact@v4
        with:
          name: linux-executables
          path: |
            dist/PyOSInstaller_linux
            PyOSInstaller_linux.deb
            PyOSInstaller-1.0-1.x86_64.rpm

  upload-runpy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Verify run.py exists
        run: |
          if [ ! -f "installer/run.py" ]; then
            echo "Error: installer/run.py not found!"
            exit 1
          fi
  
      - name: Upload run.py
        uses: actions/upload-artifact@v4
        with:
          name: installer-runpy
          path: installer/run.py